package org.cocktail.feve.components.fichelolf;
// Generated by the WOLips TemplateEngine Plug-in at 16 nov. 2005 16:41:52

import org.cocktail.feve.components.common.FeveWebComponent;
import org.cocktail.feve.eos.modele.grhum.EOFctSilland;
import org.cocktail.feve.eos.modele.mangue.EOFicheLolf;
import org.cocktail.feve.eos.modele.mangue.EOPoste;
import org.cocktail.feve.eos.modele.mangue.EORepartFloLolfNomen;
import org.cocktail.feve.eos.modele.mangue.EORepartFloSilland;
import org.cocktail.feve.eos.modele.mangue.EOTypeDroitAcces;
import org.cocktail.feve.eos.modele.mangue.EOTypeDroitCible;
import org.cocktail.fwkcktljefyadmin.common.finder.FinderExercice;
import org.cocktail.fwkcktljefyadmin.common.metier.EOLolfNomenclatureDepense;
import org.cocktail.fwkcktlwebapp.common.CktlSort;
import org.cocktail.fwkcktlwebapp.common.util.DateCtrl;
import org.cocktail.fwkcktlwebapp.common.util.NSArrayCtrl;
import org.cocktail.fwkcktlwebapp.common.util.StringCtrl;
import org.cocktail.fwkcktlwebapp.server.database.CktlDataBus;
import org.cocktail.ycrifwk.utils.UtilDb;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;

public class CompFicheLolf 
	extends FeveWebComponent {

  // elements de WORepetition et WOPopUpButton
  public EOFctSilland uneFctSilland;
  public EORepartFloSilland uneRepartSilland;
  public EORepartFloLolfNomen uneRepartLolfNomen;
  
  // selections de WORepetition
  public EOFctSilland laFctSillandSelectionnee;
  
  public Double laQuotiteFctSilland;
  public Double laQuotiteLolfNomen;
  
  // doit-on afficher le formulaire de saisie d'une fonction silland ?
  public boolean isModeAjouterFctSilland;         

  // texte descriptif des incohï¿½rences des assocations
  private String leTexteErreur;        
   
  // variables pour le popup des sous destinations
  public EOLolfNomenclatureDepense uneLolfNomenclature;
  public EOLolfNomenclatureDepense laLolfNomenclatureSelectionnee;
  
	// binding : le poste
  public EOPoste inPoste;
  
	// liste des fiches LOLF du poste
  public NSArray ficheLolfList;
	public EOFicheLolf ficheLolfItem;
	public EOFicheLolf ficheLolfSelected;
	
	// boolean
	private boolean canModifFicheLolfSelected;
	private boolean canViewFicheLolfSelected;
	public 	boolean canAccesFicheLolfSelected;
	
  public CompFicheLolf(WOContext context) {
    super(context);
  }
  
  /**
   * Detection du changement de poste pour faire des operations
   * @param value
   */
  public void setInPoste(EOPoste value) {
  	boolean hasChanged = (value != inPoste);
  	inPoste = value;
  	if (hasChanged) {
  		initSelection();
  	}
  }
  
  public void setFicheLolfSelected(EOFicheLolf value) {
  	ficheLolfSelected = value;
  	
  	if (ficheLolfSelected != null) {
    	canModifFicheLolfSelected = feveUserInfo().hasDroitOnCible(
    			EOTypeDroitAcces.MODIFICATION, EOTypeDroitCible.FICHE_LOLF, ficheLolfSelected, false);
    	
    	canViewFicheLolfSelected = feveUserInfo().hasDroitOnCible(
    			EOTypeDroitAcces.VISUALISATION, EOTypeDroitCible.FICHE_LOLF, ficheLolfSelected, false);
    	
    	canAccesFicheLolfSelected = canModifFicheLolfSelected || canViewFicheLolfSelected;
  	}
  }
  
  /**
   * Initialisation du composant
   */
	private void initSelection() {
		setFicheLolfSelected(ficheLolfSelected);
		ficheLolfList = null;
		// selection de la fiche courante
		if (inPoste.tosFicheLolf().count() > 0) {
			ficheLolfList = inPoste.tosFicheLolf(null,CktlSort.newSort(EOFicheLolf.FLO_D_DEBUT_KEY), true);
			NSArray ficheLolfExercice = EOQualifier.filteredArrayWithQualifier(
					ficheLolfList,
					CktlDataBus.newCondition(
							EOFicheLolf.TO_EXERCICE_KEY+"=%@", new NSArray(//FinderExercice.getExercicePourDate(ec, DateCtrl.now()))));
									FinderExercice.getExerciceDepensePourDate(ec, DateCtrl.now()))));
			if (ficheLolfExercice.count() > 0) {
				setFicheLolfSelected((EOFicheLolf) ficheLolfExercice.lastObject());
			} else {
				// sinon la derniere
				setFicheLolfSelected((EOFicheLolf) ficheLolfList.lastObject());
			}
		}
	}
		
	
  // ** changement de mode **
  
  // les liens
  
  public WOComponent activerModeAjouterFctSilland() {
    isModeAjouterFctSilland = true;
    // raz quotite
    laQuotiteFctSilland = null;
    // selection de la premiere
    NSArray list = getLesFctSilland();
    if (list.count() > 0) {
    	laFctSillandSelectionnee = (EOFctSilland) list.objectAtIndex(0);
    }
    return neFaitRien();
  }

  public WOComponent activerModeAjouterLolfNomenclature() {
    // on lock la fct silland associee
    uneRepartSilland.setIsEnCoursDAjoutDeLolfNomenclature(true);
    // raz quotite
    laQuotiteLolfNomen = null;
    // on selectionne la premiere
    NSArray list = getLolfNomenclatureListAjout();
    if (list.count() > 0) {
    	laLolfNomenclatureSelectionnee = (EOLolfNomenclatureDepense) list.objectAtIndex(0);
    }
    return neFaitRien();
  }
  
  
  public WOComponent modifierFctSilland() {
    uneRepartSilland.setIsEnCoursDeModification(true);
    return neFaitRien();
  }

  public WOComponent modifierLolfNomenclature() {
    // on lock uneRepartEvalFSil
    uneRepartLolfNomen.setIsEnCoursDeModification(true);
    return neFaitRien();
  }
  
  private void desactiverModeModif() {
    isModeAjouterFctSilland = false;
  }
 
  
  /**
   * boutons d'annulation 
   * @return
   */  
  public WOComponent annuler() {
    // on delock tout 
    for (int i = 0; i < ficheLolfSelected.tosRepartFloSilland().count(); i++) {
    	EORepartFloSilland uneRepart = (EORepartFloSilland) ficheLolfSelected.tosRepartFloSilland().objectAtIndex(i);
      uneRepart.setIsEnCoursDeModification(false);
      uneRepart.setIsEnCoursDAjoutDeLolfNomenclature(false);      
      for (int j = 0; j < uneRepart.tosRepartFloLolfNomen().count(); j++) {
      	EORepartFloLolfNomen uneRepartLolfNomenclature = (EORepartFloLolfNomen) uneRepart.tosRepartFloLolfNomen().objectAtIndex(j);
        uneRepartLolfNomenclature.setIsEnCoursDeModification(false);
      }
    }  
    isModeAjouterFctSilland = false;
    
    return neFaitRien();
  }
   
  // manipulation de donnees
  
  public WOComponent ajouterFctSilland() throws Throwable {
    if (laFctSillandSelectionnee != null && laQuotiteFctSilland != null) {
    	EORepartFloSilland.createRepartFloSilland(
    			ec, DateCtrl.now(), DateCtrl.now(), laQuotiteFctSilland, laFctSillandSelectionnee, ficheLolfSelected);
    	//FactoryRepartSilland.newRecordInContext(ec, inputLaFicheLolf, laFctSillandSelectionnee, laQuotiteFctSilland);
    }
    desactiverModeModif();
    UtilDb.save(ec, "ajouterFctSilland()");
    return neFaitRien();
  }
  
  public WOComponent supprimerFctSilland() throws Throwable {
    if (uneRepartSilland != null) {
     ec.deleteObject(uneRepartSilland);
     UtilDb.save(ec, "supprimerFctSilland()");
    }
    return neFaitRien();
  }
  
  public WOComponent ajouterLolfNomenclature() throws Throwable {
    if (laLolfNomenclatureSelectionnee != null && laQuotiteLolfNomen != null) {
    	/*EORepartFloLolfNomen.createRepartFloLolfNomen(
    			ec, DateCtrl.now(), DateCtrl.now(), laQuotiteLolfNomen, uneRepartSilland, laLolfNomenclatureSelectionnee);*/
    	EORepartFloLolfNomen.createRepartFloLolfNomen(
    			ec, DateCtrl.now(), DateCtrl.now(), laQuotiteLolfNomen, ficheLolfSelected.toExercice(), laLolfNomenclatureSelectionnee, uneRepartSilland);
       uneRepartSilland.setIsEnCoursDAjoutDeLolfNomenclature(false);    
    }
    UtilDb.save(ec, "");
    return neFaitRien();
  }
  
  public WOComponent supprimerLolfNomenclature() throws Throwable {
    if (uneRepartLolfNomen != null) {
      ec.deleteObject(uneRepartLolfNomen);
      UtilDb.save(ec, "");
    }
    return neFaitRien();
  }
  
  
  public WOComponent sauvegarderModificationFctSilland() throws Throwable {
    if (uneRepartSilland.toFctSilland() != null && uneRepartSilland.rfsQuotite() != null) {
      UtilDb.save(ec, "sauvegarderModificationFctSilland()");
      uneRepartSilland.setIsEnCoursDeModification(false);
      desactiverModeModif();
    }
    return neFaitRien();
  }
  
  
  public WOComponent sauvegarderModificationLolfNomenclature() throws Throwable {
    if (//uneRepartLolfNomen.toTypeAction()!= null && 
    		uneRepartLolfNomen.toLolfNomenclatureDepense() != null && uneRepartLolfNomen.rrfQuotite() != null) {
      UtilDb.save(ec, "");
      // delock
      uneRepartLolfNomen.setIsEnCoursDeModification(false);
      uneRepartLolfNomen.toRepartFloSilland().setIsEnCoursDAjoutDeLolfNomenclature(false);
      desactiverModeModif();        
    }
    return neFaitRien();
  }

  
  // getters

  
  /**
   * Les fonctions SILLAND declarees sur l'exercice
   * on enleve celle deja affectees
   * @return
   */
  public NSArray getLesFctSilland() {
  	NSMutableArray result = new NSMutableArray(
  			EOFctSilland.findAllFctSillandExerciceInContext(ec, ficheLolfSelected.toExercice(), ficheLolfSelected.toPoste()));
		// suppression des fct silland deja affectees a cette fiche
		NSArray affectees = NSArrayCtrl.flattenArray((NSArray) ficheLolfSelected.valueForKeyPath(
				EOFicheLolf.TOS_REPART_FLO_SILLAND_KEY + "." + 
				EORepartFloSilland.TO_FCT_SILLAND_KEY));
		for (int i=0; i<affectees.count(); i++) {
			result.removeIdenticalObject(affectees.objectAtIndex(i));
		}
  	return result.immutableClone();
  }
  

  /**
	 * Liste de toutes les actions pour l'annee selectionnee, pour lesquels
	 * on enleve les actions deja affectees
	 * @return
	 */
	public NSArray getLolfNomenclatureListAjout() {
		return getLolfNomenclatureListAjout(uneRepartSilland.toFctSilland());
	}

  /**
	 * Liste de toutes les actions pour l'annee selectionnee, pour lesquels
	 * on enleve les actions deja affectees
	 * @return
	 */
	private NSArray getLolfNomenclatureListAjout(EOFctSilland recFctSilland) {
		if (recFctSilland != null) {
			NSMutableArray result = new NSMutableArray(
					recFctSilland.tosTypeAction(ficheLolfSelected.toExercice()));
			// suppression des destinations deja affectees a cette fiche
			// pour cette meme fonction silland
			NSArray affectees = NSArrayCtrl.flattenArray((NSArray) ficheLolfSelected.valueForKeyPath(
					EOFicheLolf.TOS_REPART_FLO_SILLAND_KEY + "." + 
					EORepartFloSilland.TOS_REPART_FLO_LOLF_NOMEN_KEY));
			for (int i=0; i<affectees.count(); i++) {
				EORepartFloLolfNomen repart = (EORepartFloLolfNomen) affectees.objectAtIndex(i);
				if (repart.toRepartFloSilland().toFctSilland() == recFctSilland) {
					result.removeIdenticalObject(//repart.toTypeAction());
							repart.toLolfNomenclatureDepense());
				}
			}
			return result.immutableClone();
		}
		return new NSArray();
	}

  /**
	 * Liste de toutes les actions affectees a la fiche 
	 * pour la fonction silland en cours de modif
	 * @return
	 */
	public NSArray getLolfNomenclatureListModif() {
		EOFctSilland fctSilland = uneRepartLolfNomen.toRepartFloSilland().toFctSilland();
		if (fctSilland != null) {
			NSMutableArray result = new NSMutableArray(
					fctSilland.tosTypeAction(ficheLolfSelected.toExercice()));
			// suppression des destinations deja affectees sous cette fonction silland
			NSArray affectees = NSArrayCtrl.flattenArray(
					(NSArray) uneRepartLolfNomen.toRepartFloSilland().tosRepartFloLolfNomen().valueForKey(
							//EORepartFloLolfNomen.TO_TYPE_ACTION_KEY));
							EORepartFloLolfNomen.TO_LOLF_NOMENCLATURE_DEPENSE_KEY));
			for (int i=0; i<affectees.count(); i++) {
				// on vire pas celle en cours d'edition
				EOLolfNomenclatureDepense lolfNomen = (EOLolfNomenclatureDepense) affectees.objectAtIndex(i);
				//if (uneRepartLolfNomen.toTypeAction() != lolfNomen) {
				if (uneRepartLolfNomen.toLolfNomenclatureDepense() != lolfNomen) {
					result.removeIdenticalObject(lolfNomen);
				}
			}
			return result.immutableClone();
		}
		return null;
	}

	/**
	 * La liste des fonction silland affectee par ordre alphabetique
	 * @return
	 */
	public NSArray getSortedRepartFloSilland() {
		return ficheLolfSelected.tosRepartFloSilland(
				null, CktlSort.newSort(EORepartFloSilland.TO_FCT_SILLAND_KEY + "." + EOFctSilland.SIL_LIBELLE_KEY), true);
	}

	/**
   * La liste des destinations affectee par ordre alphabetique
	 * @return
	 */
	public NSArray getSortedRepartFloLolfNomen() {
		NSArray sortedLolfNomenclatureDepense = NSArrayCtrl.flattenArray(
			//	(NSArray) uneRepartSilland.tosRepartFloLolfNomen().valueForKey(EORepartFloLolfNomen.TO_TYPE_ACTION_KEY));
			(NSArray) uneRepartSilland.tosRepartFloLolfNomen().valueForKey(EORepartFloLolfNomen.TO_LOLF_NOMENCLATURE_DEPENSE_KEY));
		//sortedTypeAction = CktlSort.sortedArray(sortedTypeAction, EOTypeAction.TYAC_LIBELLE_KEY);
		sortedLolfNomenclatureDepense = CktlSort.sortedArray(sortedLolfNomenclatureDepense, EOLolfNomenclatureDepense.LOLF_LIBELLE_KEY);
		// remettage dans l'ordre
		NSArray sortedRepartFloLolfNomem = new NSArray();
		for (int i=0; i<sortedLolfNomenclatureDepense.count(); i++) {
			EOLolfNomenclatureDepense lolfNomenclatureDepense = (EOLolfNomenclatureDepense) sortedLolfNomenclatureDepense.objectAtIndex(i);
			NSArray filteredRepart = EOQualifier.filteredArrayWithQualifier(
					uneRepartSilland.tosRepartFloLolfNomen(), 
					//CktlDataBus.newCondition(EORepartFloLolfNomen.TO_TYPE_ACTION_KEY +"=%@", new NSArray(typeAction)));
					CktlDataBus.newCondition(EORepartFloLolfNomen.TO_LOLF_NOMENCLATURE_DEPENSE_KEY +"=%@", new NSArray(lolfNomenclatureDepense)));
			if (filteredRepart.count() > 0) {
				sortedRepartFloLolfNomem = sortedRepartFloLolfNomem.arrayByAddingObject(filteredRepart.lastObject());
			}
		}
		return sortedRepartFloLolfNomem;
	}
	
  /**
   * valeur par defaut :  le complemenet pour que la somme des quotite des autres pour arriver a 100%
   */
  public Double getLaQuotiteLolfNomen() {
    if (laQuotiteLolfNomen == null) {
      double somme = ((Number) uneRepartSilland.tosRepartFloLolfNomen().valueForKey(
      		"@sum."+EORepartFloLolfNomen.RRF_QUOTITE_KEY)).doubleValue();
      laQuotiteLolfNomen = new Double(100.0 - somme);
    }
    return laQuotiteLolfNomen;
  }
  
  /**
   * valeur par defaut : le complement des autres pour arriver a 100%
   * @return
   */
  public Double getLaQuotiteFctSilland() {
    if (laQuotiteFctSilland == null) {
      double somme = ((Number) ficheLolfSelected.tosRepartFloSilland().valueForKey("@sum.rfsQuotite")).doubleValue();
      laQuotiteFctSilland = new Double(100.0 - somme);
    }
    return laQuotiteFctSilland;
  }
  
  
  /**
   * description des pb rencontres
   * - erreurs d affectations des quotites
   * @return
   */
  public String getLeTexteErreur() {
    leTexteErreur = "";
    
    // calcul des sommes totales des fonctions silland
    Double totalSilland = new Double(((Number) ficheLolfSelected.tosRepartFloSilland().valueForKey("@sum.rfsQuotite")).doubleValue());
    if (totalSilland.compareTo(new Double("100")) != 0) {
      leTexteErreur += "La somme des pourcentages de toutes les fonctions SILLAND n'est pas &eacute;gale &agrave; 100% (ici : <b><font color='red'>" + totalSilland + "</font></b>)<BR><BR>";
    }
    
    // calcul des sous sommes par rapport aux destinations jefycos
    for (int i = 0; i < ficheLolfSelected.tosRepartFloSilland().count(); i++) {
      EORepartFloSilland uneRepart = (EORepartFloSilland) ficheLolfSelected.tosRepartFloSilland().objectAtIndex(i);
      Double totalLolfNomenclature = new Double(((Number)  uneRepart.tosRepartFloLolfNomen().valueForKey("@sum."+EORepartFloLolfNomen.RRF_QUOTITE_KEY)).doubleValue());      
      if (totalLolfNomenclature.compareTo(new Double(100)) != 0) {
        leTexteErreur += 
          "Fonction SILLAND : '" + uneRepart.toFctSilland().display() + "' :<br>" +
          "La somme des pourcentage de toutes les destinations LOLF n'est pas &eacute;gale &agrave; 100% (ici : <font color='red'>" + totalLolfNomenclature + "</font>)" +
          "<br><br>";   
      }
    }
    
    
    return leTexteErreur;
  }
  
  
  // methodes internes
  

  /**
   * un des repart fctSilland est en cours de modif
   * @return
   */
  private boolean auMoinsUneRepartSillandEstEnCoursDeModification() {
    boolean isModifiable = false;
    for (int i = 0; i < ficheLolfSelected.tosRepartFloSilland().count(); i++) {
      isModifiable = isModifiable || ((EORepartFloSilland) ficheLolfSelected.tosRepartFloSilland().objectAtIndex(i)).isEnCoursDeModification();
    }
    return isModifiable;
  }
  
  /**
   * un des repart fctSilland est en cours d ajout
   * @return
   */
  private boolean auMoinsUneRepartSillandEstEnCoursDAjoutLolfNomen() {
    boolean isModifiable = false;
    for (int i = 0; i < ficheLolfSelected.tosRepartFloSilland().count(); i++) {
      isModifiable = isModifiable || ((EORepartFloSilland) ficheLolfSelected.tosRepartFloSilland().objectAtIndex(i)).isEnCoursDAjoutDeLolfNomenclature();
    }
    return isModifiable;
  }
  
  /**
   * un des repart LolfNomenclature est en cours de modif
   * @return
   */
  private boolean auMoinsUneRepartLolfNomenEstEnCoursDeModification() {
    boolean isModifiable = false;
    for (int i = 0; i < ficheLolfSelected.tosRepartFloSilland().count(); i++) {
    	EORepartFloSilland uneRepart = (EORepartFloSilland) ficheLolfSelected.tosRepartFloSilland().objectAtIndex(i);
      for (int j = 0; j < uneRepart.tosRepartFloLolfNomen().count(); j++) {
        EORepartFloLolfNomen uneRepartLolfNomen = (EORepartFloLolfNomen) uneRepart.tosRepartFloLolfNomen().objectAtIndex(j);
        isModifiable = isModifiable || uneRepartLolfNomen.isEnCoursDeModification();
      }
    }
    return isModifiable;
  }
  
  
  // boolean interface

  /**
   * Affichage du lien d'ajout d'une fonction silland
   * @return
   */
  public boolean showLienAjouterFctSilland() {
  	boolean show = !isModeAjouterFctSilland && 
  	!auMoinsUneRepartSillandEstEnCoursDeModification() && 
  	!auMoinsUneRepartSillandEstEnCoursDAjoutLolfNomen() && 
  	canModifFicheLolfSelected;

    // si la somme fait 100%, on masque
    if (((Number) getSortedRepartFloSilland().valueForKeyPath("@sum."+EORepartFloSilland.RFS_QUOTITE_KEY)).intValue() == 100) {
    	show = false;
    }
    
    // on affiche s'il en reste d'affichable
  	if (show) {
  		show = getLesFctSilland().count() > 0;
  	}
  	
  	return show;
  }
  
  /**
   * Affichage du lien d'ajout d'une destination LOLF
   * @return
   */
  public boolean showLienAjouterLolfNomenclature() {
    boolean show = 
    	!isModeAjouterFctSilland && 
    	!auMoinsUneRepartSillandEstEnCoursDeModification() && 
    	!auMoinsUneRepartSillandEstEnCoursDAjoutLolfNomen() && 
    	canModifFicheLolfSelected;
  
    // si la somme fait 100%, on masque
    if (((Number) uneRepartSilland.tosRepartFloLolfNomen().valueForKeyPath("@sum."+EORepartFloLolfNomen.RRF_QUOTITE_KEY)).intValue() == 100) {
    	show = false;
    }
    
    // on affiche s'il en reste d'affichable
    if (show) {
    	show = getLolfNomenclatureListAjout(uneRepartSilland.toFctSilland()).count() > 0;
    }
    
    return show;
  }
  
  public boolean showLigneModiferFctSilland() {
    return canModifFicheLolfSelected && uneRepartSilland.isEnCoursDeModification();
  }
  
  
  public boolean isDisabledBtnModifierFctSilland() {
    return !canModifFicheLolfSelected || isModeAjouterFctSilland || auMoinsUneRepartSillandEstEnCoursDeModification() || auMoinsUneRepartSillandEstEnCoursDAjoutLolfNomen() || auMoinsUneRepartLolfNomenEstEnCoursDeModification();
  }
  
  public boolean isDisabledBtnSupprimerFctSilland() {
    return !canModifFicheLolfSelected || isModeAjouterFctSilland || auMoinsUneRepartSillandEstEnCoursDeModification() || auMoinsUneRepartSillandEstEnCoursDAjoutLolfNomen() || auMoinsUneRepartLolfNomenEstEnCoursDeModification();
  }
  
  public boolean isDisabledBtnAppliquerFctSilland() {
    return !canModifFicheLolfSelected || uneRepartSilland.toFctSilland() == null;
  }
  
  public boolean isDisabledBtnModifierLolfNomenclature() {
    return !canModifFicheLolfSelected || isModeAjouterFctSilland || auMoinsUneRepartSillandEstEnCoursDeModification() || auMoinsUneRepartSillandEstEnCoursDAjoutLolfNomen() || auMoinsUneRepartLolfNomenEstEnCoursDeModification();
  }
  
  public boolean isDisabledBtnSupprimerLolfNomenclature() {
    return !canModifFicheLolfSelected || isModeAjouterFctSilland || auMoinsUneRepartSillandEstEnCoursDeModification() || auMoinsUneRepartSillandEstEnCoursDAjoutLolfNomen() || auMoinsUneRepartLolfNomenEstEnCoursDeModification();
  }
  
  public boolean isDisabledBtnAppliquerLolfNomenclature() {
  	return !canModifFicheLolfSelected || /*uneRepartLolfNomen.toTypeAction() == null*/ uneRepartLolfNomen.toLolfNomenclatureDepense() == null;
  }
  
  public boolean isDisabledBtnAjouterFctSilland() {
    return !canModifFicheLolfSelected || laFctSillandSelectionnee == null;
  }
  
  public boolean isDisabledBtnAjouterLolfNomenclature() {
    return !canModifFicheLolfSelected || laLolfNomenclatureSelectionnee == null;
  }
  
  public boolean showLeTexteErreur() {
    return !StringCtrl.isEmpty(getLeTexteErreur());
  }
    
  public boolean isAFicheLolfSelected() {
  	return ficheLolfSelected != null;
  }
 
  public boolean isInPosteExists() {
  	return inPoste != null;
  }

	// interface
	
  /**
   * Message d'information sur la periode d'ouverture de saisie des fiches LOLF
   * @return
   */
  public String getInfoPeriodeLolf() {
  	StringBuffer sb = new StringBuffer();
		sb.append("La saisie est autoris&eacute;e du ");
		sb.append(DateCtrl.dateToString(app.getFicheLolfSaisieDDebut()));
		sb.append(" au ");
		sb.append(DateCtrl.dateToString(app.getFicheLolfSaisieDFin()));
		sb.append("<br/>");

		if (app.isPeriodeLolfOuverte()) {
			sb.append("Vous pouvez saisir modifier la fiche LOLF actuelle.");
		} else {
			sb.append("<font class=textError>");
			sb.append("Vous ne pouvez pas modifier de fiche LOLF");
			if (feveUserInfo().isAdmin()) {
				sb.append("<br/>(enfin <u>VOUS si</u>, car vous &ecirc;tes administrateur :) )");
			}
			sb.append("</font>");
		}
		return sb.toString();
  }
  
 
}
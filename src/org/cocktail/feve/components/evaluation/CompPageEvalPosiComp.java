package org.cocktail.feve.components.evaluation;
// Generated by the WOLips TemplateEngine Plug-in at 27 avr. 2005 14:22:13

import org.cocktail.feve.components.common.FeveWebComponent;
import org.cocktail.feve.eos.modele.grhum.EONiveauCompetence;
import org.cocktail.feve.eos.modele.grhum.EOReferensCompetences;
import org.cocktail.feve.eos.modele.mangue.A_CanBeDeleted;
import org.cocktail.feve.eos.modele.mangue.EOEvaluation;
import org.cocktail.feve.eos.modele.mangue.EOFicheDePoste;
import org.cocktail.feve.eos.modele.mangue.EORepartEvaNouvelleComp;
import org.cocktail.feve.eos.modele.mangue.EORepartFdpAutre;
import org.cocktail.feve.eos.modele.mangue.EORepartFdpComp;
import org.cocktail.feve.eos.modele.mangue.EORepartNiveauComp;
import org.cocktail.fwkcktlwebapp.common.database.CktlRecord;
import org.cocktail.fwkcktlwebapp.common.util.NSArrayCtrl;
import org.cocktail.fwkcktlwebapp.common.util.StringCtrl;
import org.cocktail.fwkcktlwebapp.server.database.CktlDataBus;
import org.cocktail.ycrifwk.utils.UtilDb;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOGlobalID;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;

public class CompPageEvalPosiComp 
	extends FeveWebComponent {

  // variables entrantes
  public EOEvaluation inputLEvaluation;
  public boolean disabled;

  public EOFicheDePoste uneFicheDePoste;
  
  // niveau de competences
  public EONiveauCompetence unNiveauCompetence;

  // competences des fiches de poste
  public EORepartFdpComp uneRepart;
  
  // competences "autres" de la fiche de poste
  public EORepartFdpAutre uneRepartAutre;

  // competences supplementaires
  public EORepartEvaNouvelleComp uneRepartNouvelleComp;

  public EOReferensCompetences laCompetenceSelectionnee;

  public boolean isModeAjouter; // doit-on afficher le composant de saisie
                                    // d'une nouvelle competence ?

  public boolean isModeModifierChampLibre; // le mode modifier champ libre
                                              // est-il on ?

  public CompPageEvalPosiComp(WOContext context) {
    super(context);
  }

  /**
   * disponibilite du popup en face de chaque competence, inactif si : -
   * composant desactive - mode ajouter comp ON - mode modifier champ livre on
   * 
   * @return
   */
  public boolean isDisabledPopupNotation() {
    return disabled || isModeAjouter || isModeModifierChampLibre;
  }

  /**
   * Bouton appel� lors de la sauvegarde d'une notation de competence
   * sur une fiche de poste
   * @return
   * @throws Throwable
   */
  public WOComponent sauvegarder() throws Throwable {
    UtilDb.save(ec, "sauvegarder");
    // on se position sur l'ancre des fiches de poste
    session.setOnLoad("document.location='#compPrincipales';");
    return neFaitRien();
  }

  /**
   * On affiche le bloc competences annexes reperees uniquement si
   * on est en mode modification, ou bien en mode lecture et qu'il 
   * y a effectivement des competences associees.
   * @return
   */
  public boolean showBlocCompetenceAnnexes() {
  	boolean show = !disabled;
  	
  	if (!show) {
  		show = inputLEvaluation.tosRepartEvaNouvelleComp().count() > 0;
  	}
  	
  	return show;
  }
  
  /**
   * On affiche le bloc champ libre uniquement si
   * on est en mode modification, ou bien en mode lecture et qu'il 
   * y a quelque chose dedans
   * @return
   */
  public boolean showBlocChampLibre() {
  	boolean show = !disabled;
  	
  	if (!show) {
  		show = !StringCtrl.isEmpty(inputLEvaluation.evaChampLibre());
  	}
  	
  	return show;
  }
  
  /**
   * associer une nouvelle competence
   */
  public WOComponent associerNouvelleCompetence() throws Throwable {
    if (laCompetenceSelectionnee != null) {
      session.setOnLoad("document.location='#compAnnexes';");      
      desactiverModeAjouter();
      EORepartEvaNouvelleComp.newRecordInContext(ec, inputLEvaluation, laCompetenceSelectionnee);
      UtilDb.save(ec, "associerNouvelleCompetence");
      ec.invalidateObjectsWithGlobalIDs(new NSArray<EOGlobalID>(ec.globalIDForObject(inputLEvaluation)));
    }
    return neFaitRien();
  }

  /**
   * 
   * @return
   */
  public WOComponent annulerModif() {
    ec.revert();
    desactiverModeAjouter();
    return neFaitRien();
  }
  
  /**
   * passer en mode ajout de competence
   */
  public WOComponent activerModeAjouter() {
    session.setOnLoad("document.location='#compAnnexes';");      
    isModeAjouter = true;
    return neFaitRien();
  }

  public WOComponent desactiverModeAjouter() {
    session.setOnLoad("document.location='#compAnnexes';");      
    isModeAjouter = false;
    return neFaitRien();
  }

  /**
   * visibilite de la ligne d'ajout de competence - le mode ajouter est ON - le
   * composant est pas disabled via binding
   */
  public boolean showLigneAjouter() {
    return isModeAjouter && !disabled;
  }

  /**
   * visibilite de l'hyperlien "Ajouter un nouvelle competence" - le mode
   * ajouter est OFF - le composant est pas disabled via binding
   * 
   * @return
   */
  public boolean showLienAjouter() {
    return !isModeAjouter && !disabled;
  }

  /**
   * disponibilite des boutons de manip de l'item en cours (supp), inactif si : -
   * composant desactive - mode ajouter comp on - mode modifier champ libre on
   */
  public boolean isDisabledBtnSupprimer() {
    return disabled || isModeAjouter || isModeModifierChampLibre;
  }

  // GESTION DU CHAMP LIBRE

  public WOComponent activerModeModifierChampLibre() {
    isModeModifierChampLibre = true;
    return neFaitRien();
  }

  public WOComponent desactiverModeModifierChampLibre() {
    isModeModifierChampLibre = false;
    return neFaitRien();
  }

  public WOComponent modifierChampLibre() {
    session.setOnLoad("document.location='#champLibre';");      
    activerModeModifierChampLibre();
    return neFaitRien();
  }

  public WOComponent enregistrerChampLibre() throws Throwable {
    session.setOnLoad("document.location='#champLibre';");      
    desactiverModeModifierChampLibre();
    UtilDb.save(ec, "");
    return neFaitRien();
  }

  public WOComponent annulerEnregisterChampLibre() {
    session.setOnLoad("document.location='#champLibre';");      
    desactiverModeModifierChampLibre();
    ec.revert();
    return neFaitRien();
  }

  /**
   * bouton MODIFIER du champ libre inactif si - composant en lecture seule -
   * mode ajout active
   * 
   * @return
   */
  public boolean isDisabledBtnModifierChampLibre() {
    return disabled || isModeAjouter;
  }

  /**
   * disponibilite du champ libre lui meme
   * 
   * @return
   */
  public boolean isDisabledChampLibre() {
    return disabled || !isModeModifierChampLibre;
  }
  
  
  // 
  
  /**
   * pour chaque association de competence aux fiche de poste, il y a un enregistrement
   * sur la notation. S'il n'existe pas, on le cree
   * @return
   */
  public EORepartNiveauComp laRepartNiveauCompCorrespondant() {
    EORepartNiveauComp repart = null;
    if (uneRepart.tosRepartNiveauComp().count() == 0) {
      repart = EORepartNiveauComp.create(ec, inputLEvaluation, null, uneRepart);
    } else {
      // on prend celui correspondant a l'evaluation en cours
      EOQualifier qual = EOQualifier.qualifierWithQualifierFormat(
      		EORepartNiveauComp.TO_EVALUATION_KEY + "=%@", 
      		new NSArray<EOEvaluation>(inputLEvaluation));
      NSArray lesRepartTrouves = EOQualifier.filteredArrayWithQualifier(uneRepart.tosRepartNiveauComp(), qual);
      if (lesRepartTrouves.count() > 0) {
        repart = (EORepartNiveauComp) lesRepartTrouves.lastObject();
      } else {
        repart = EORepartNiveauComp.create(ec, inputLEvaluation, null, uneRepart);
      }
    }
    return repart;
  }
  
  /**
   * pour chaque association de competence autre aux fiche de poste, il y a un enregistrement
   * sur la notation. S'il n'existe pas, on le cree
   * @return
   */
  public EORepartNiveauComp laRepartNiveauCompAutreCorrespondant() {
    EORepartNiveauComp repart = null;
    if (uneRepartAutre.tosRepartNiveauComp().count() == 0) {
      repart = EORepartNiveauComp.create(ec, inputLEvaluation, uneRepartAutre, null);
    } else {
      // on prend celui correspondant a l'evaluation en cours
      EOQualifier qual = EOQualifier.qualifierWithQualifierFormat(
      		EORepartNiveauComp.TO_EVALUATION_KEY + "=%@", 
      		new NSArray(inputLEvaluation));
      NSArray lesRepartTrouves = EOQualifier.filteredArrayWithQualifier(uneRepartAutre.tosRepartNiveauComp(), qual);
      if (lesRepartTrouves.count() > 0) {
        repart = (EORepartNiveauComp) lesRepartTrouves.lastObject();
      } else {
        repart = EORepartNiveauComp.create(ec, inputLEvaluation, uneRepartAutre, null);
      }
    }
    return repart;
  }

  /**
   * La liste des competences associ�es aux fiches de postes li�es
   * a cet �valuation, pour ne pas les reproposer en tant que nouvelles
   * competences rep�r�es 
   */
  public NSArray getCompetencesAssociesAuxFiches() {
  	NSArray result = new NSArray();
 
  	if (inputLEvaluation != null) {
  		// les competences des fiches
  		result = NSArrayCtrl.flattenArray(
  				(NSArray) inputLEvaluation.valueForKeyPath("tosLastFicheDePoste.tosReferensCompetences"));
  		// les autres competences annexes reperees
  		result = result.arrayByAddingObjectsFromArray(
  				NSArrayCtrl.flattenArray(
  						(NSArray) inputLEvaluation.tosRepartEvaNouvelleComp().valueForKey(EORepartEvaNouvelleComp.TO_REFERENS_COMPETENCES_KEY)));
  	}
  	
  	return result;
  }
  
  // generation code javascript
  
  private final static String COMPETENCES_ANNEXES_LABEL =	"CompetencesAnnexes";

  /**
   * code javascript de la fonction pour la selection / deselection de 
   * toutes les competences annexes
   */
  public String getJsFunctionSelectionCompetencesAnnexes() {
  	return getJsFunctionSelection(COMPETENCES_ANNEXES_LABEL, 
  			(NSArray) inputLEvaluation.tosRepartEvaNouvelleComp().valueForKey(EORepartEvaNouvelleComp.ID_KEY));
  }

  
  /**
   * Le code onclick pour la coche de toutes les activites
   * @return
   */
  public String getOnClickSelectionCompetencesAnnexes() {
  	return getOnClickSelection(COMPETENCES_ANNEXES_LABEL);
  }
  
  
  /**
   * Supprimer les competences annexes selectionn�es
   * @return
   * @throws Throwable
   */
  public WOComponent supprimerCompetencesAnnexesSelectionnees() throws Throwable {
  	// compte le nombre de repart a supprimer
  	NSArray repartList = inputLEvaluation.tosRepartEvaNouvelleComp();
  	// recuperer la liste des enregistrements a supprimer
  	repartList = EOQualifier.filteredArrayWithQualifier(
  			repartList,
  			CktlDataBus.newCondition(A_CanBeDeleted.IS_MARKED_TO_DELETE_KEY + "=%@", new NSArray(Boolean.TRUE)));
  	// 
  	if (repartList.count() > 0) {
  		for (int i=0; i<repartList.count(); i++) {
  			CktlRecord recordToDelete = (CktlRecord) repartList.objectAtIndex(i);
  			ec.deleteObject(recordToDelete);
  		}
  		// sauvegarde
      UtilDb.save(ec, "supprimerNouvelleCompetence");
      ec.invalidateObjectsWithGlobalIDs(new NSArray(ec.globalIDForObject(inputLEvaluation)));
  	}
    session.setOnLoad("document.location='#compAnnexes';");      

  	return neFaitRien();
  }

  /**
   * 
   * @return
   */
  public boolean showSuppressionCompetencesAnnexes() {
  	return !isDisabledBtnSupprimer() && inputLEvaluation != null && inputLEvaluation.tosRepartEvaNouvelleComp().count() > 0;
  }
  
  // setters silencieux
  
  public void setCompetencesAssociesAuxFiches(NSArray value) {

  }
}
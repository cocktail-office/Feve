package org.cocktail.feve.components.administration.hierarchie;

// Generated by the WOLips TemplateEngine Plug-in at 21 nov. 2005 16:49:58

import java.util.NoSuchElementException;

import org.cocktail.feve.components.administration.PageAdministration;
import org.cocktail.feve.components.common.FeveWebComponent;
import org.cocktail.feve.eos.modele.grhum.EOIndividu;
import org.cocktail.feve.eos.modele.grhum.EOStructure;
import org.cocktail.feve.eos.modele.mangue.EODroit;
import org.cocktail.feve.eos.modele.mangue.EOEvaluation;
import org.cocktail.feve.eos.modele.mangue.EOEvaluationPeriode;
import org.cocktail.feve.eos.modele.mangue.EOHierarchie;
import org.cocktail.feve.eos.modele.mangue.EOTypeDroitAcces;
import org.cocktail.feve.eos.modele.mangue.EOTypeDroitCible;
import org.cocktail.feve.eos.modele.mangue.EOVCandidatEvaluation;
import org.cocktail.fwkcktlwebapp.common.util.DateCtrl;
import org.cocktail.fwkcktlwebapp.server.components.CktlAlertPage;
import org.cocktail.fwkcktlwebapp.server.components.CktlAlertResponder;
import org.cocktail.ycrifwk.utils.UtilDb;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.eocontrol.EOGlobalID;
import com.webobjects.foundation.NSArray;

/**
 * "Noeud" de l'arbre hierarchique
 * 
 * @author ctarade
 */
public class NodeHierarchie
		extends FeveWebComponent {

	// variable entrante
	public EOHierarchie inputLaHierarchie;

	//
	public EOEvaluationPeriode inputLaPeriode;

	// le composant pere pour notifier lors de la suppression de la racine
	private ArbreHierarchique arbreHierachieComponent;

	// affichage arbre
	public EOHierarchie uneHierarchie;

	public EOIndividu unIndividu;
	public NSArray<EOIndividu> lesIndividuSelectionne;

	public boolean isModeAjouter;
	public boolean isModeModifier;

	// radio ajout individu
	public final String TYPE_INDIVIDU_NON_ENS = "NON_ENS";
	public final String TYPE_INDIVIDU_ENS = "ENS";
	public String typeIndividu = TYPE_INDIVIDU_NON_ENS;

	// radio modif individu
	public final String HIE_INDIVIDU_NON_HIE = "NON_HIE";
	public final String HIE_INDIVIDU_HIE = "HIE";
	public String hieIndividu = HIE_INDIVIDU_NON_HIE;

	/**
	 * La page qui a appeler le tout premier objet NodeHierarchie.
	 */
	public PageAdministrationHierarchie pageAdministrationHierarchie;

	/**
	 * Indique s'il faut afficher les droits directs ou pas
	 */
	public boolean showDroitsAnnexes;

	/**
	 * Indique s'il faut afficher les droits herites ou pas
	 */
	public boolean showDroitsHerites;

	/**
	 * Indique s'il faut afficher le nombre d'évaluations
	 */
	public boolean showTotalEvaluation;

	/**
	 * Indique s'il faut afficher les evaluations de chaque agent
	 */
	public boolean showEvaluations;

	// composant SelectIndividuHierarchie
	public EOIndividu eoIndividuSelected;

	public NodeHierarchie(WOContext context) {
		super(context);
	}

	/**
	 * nom du nom form unique
	 */
	public String formName() {
		return "Form" +
				(
				(inputLaHierarchie != null && inputLaHierarchie.toIndividu() != null) ?
						String.valueOf(inputLaHierarchie.toIndividu().persId().intValue()) :
						""
				);
	}

	// navigation

	public WOComponent voirNm1() {
		inputLaHierarchie.setVoirNm1(true);
		// aller au dernier individu choisi
		if (inputLaHierarchie != null && inputLaHierarchie.toIndividu() != null) {
			session.setOnLoad("document.location='#" + inputLaHierarchie.toIndividu().persId() + "';");
		}
		return neFaitRien();
	}

	public WOComponent voirTousNm1() {
		inputLaHierarchie.voirTousNm1();
		// aller au dernier individu choisi
		if (inputLaHierarchie != null && inputLaHierarchie.toIndividu() != null) {
			session.setOnLoad("document.location='#" + inputLaHierarchie.toIndividu().persId() + "';");
		}
		return neFaitRien();
	}

	public WOComponent cacherNm1() {
		inputLaHierarchie.setVoirNm1(false);
		// aller au dernier individu choisi
		if (inputLaHierarchie != null && inputLaHierarchie.toIndividu() != null) {
			session.setOnLoad("document.location='#" + inputLaHierarchie.toIndividu().persId() + "';");
		}
		return neFaitRien();
	}

	public WOComponent cacherTousNm1() {
		inputLaHierarchie.cacherTousNm1();
		// aller au dernier individu choisi
		if (inputLaHierarchie != null && inputLaHierarchie.toIndividu() != null) {
			session.setOnLoad("document.location='#" + inputLaHierarchie.toIndividu().persId() + "';");
		}
		return neFaitRien();
	}

	public WOComponent ajouterIndividu() {
		isModeAjouter = true;
		isModeModifier = false;
		// aller au dernier individu choisi
		if (inputLaHierarchie != null && inputLaHierarchie.toIndividu() != null) {
			session.setOnLoad("document.location='#" + inputLaHierarchie.toIndividu().persId() + "';");
		}
		return neFaitRien();
	}

	public WOComponent enregistrerAjout() throws Throwable {
		if (eoIndividuSelected != null) {
			EOIndividu individuResp = (inputLaHierarchie == null ? null : inputLaHierarchie.toIndividu());
			EOHierarchie laNouvelleHierarchie = EOHierarchie.newRecordInContext(
					ec, individuResp, eoIndividuSelected, inputLaPeriode);
			UtilDb.save(ec, "");
			isModeAjouter = false;
			// refetcher les objets
			ec.invalidateObjectsWithGlobalIDs(new NSArray(ec.globalIDForObject(inputLaHierarchie)));
			ec.invalidateObjectsWithGlobalIDs(new NSArray(ec.globalIDForObject(laNouvelleHierarchie)));
			// afficher le nouveau N+1
			voirNm1();
			// aller a l'individu ajout�
			session.setOnLoad("document.location='#" + eoIndividuSelected.persId() + "';");
		}
		return neFaitRien();
	}

	/**
	 * Intercaler un agent dans la hierarchie. On insere entre tous les N-1 et le
	 * N+1
	 */
	public WOComponent enregistrerIntercaler() throws Throwable {
		if (eoIndividuSelected != null) {
			EOIndividu individuResp = (inputLaHierarchie == null ? null : inputLaHierarchie.toIndividu());
			EOHierarchie laNouvelleHierarchie = EOHierarchie.newRecordInContext(
					ec, individuResp, eoIndividuSelected, inputLaPeriode);
			// on prend tous les fils et on met en papa laNouvelleHierarchie
			for (int i = 0; i < inputLaHierarchie.tosHierarchieNm1().count(); i++) {
				EOHierarchie recHierarchie = (EOHierarchie) inputLaHierarchie.tosHierarchieNm1().objectAtIndex(i);
				recHierarchie.setToIndividuRespRelationship(eoIndividuSelected);
			}
			UtilDb.save(ec, "");
			isModeAjouter = false;
			// refetcher les objets
			ec.invalidateObjectsWithGlobalIDs(new NSArray(ec.globalIDForObject(inputLaHierarchie)));
			ec.invalidateObjectsWithGlobalIDs(new NSArray(ec.globalIDForObject(laNouvelleHierarchie)));
			// afficher le nouveau N+1
			voirNm1();
			// aller a l'individu ajout�
			session.setOnLoad("document.location='#" + eoIndividuSelected.persId() + "';");
		}
		return neFaitRien();
	}

	public WOComponent annuler() {
		ec.revert();
		isModeAjouter = false;
		isModeModifier = false;
		// aller au dernier individu choisi
		if (inputLaHierarchie != null && inputLaHierarchie.toIndividu() != null) {
			session.setOnLoad("document.location='#" + inputLaHierarchie.toIndividu().persId() + "';");
		}
		return neFaitRien();
	}

	/**
	 * supprimer un N-1 ainsi que toute sa 'descendance'
	 * 
	 * @return
	 */
	public WOComponent supprimer() {
		// ne pas autoriser la suppression d'une racine avec plusieurs fils
		WOComponent pageRetour = session.getSavedPageWithName(PageAdministration.class.getName());
		if (inputLaHierarchie.isRacine() &&
				inputLaHierarchie.tosHierarchieNm1().count() > 1) {
			return CktlAlertPage.newAlertPageWithCaller(
					pageRetour, "Suppression d'un N-1",
					"Vous ne pouvez pas supprimer l'enregistrement racine si la liste est N-1 direct compte plus d'un enregistrement<br><br>" +
							"Cela entrainerait un décalage d'un niveau vers le haut, et il y aurait alors plusieurs racines ... et donc ce ne serait plus un arbre !",
					"<< Revenir", CktlAlertPage.ERROR);
		} else {
			// page de confirmation
			SupprimerResponder responder = new SupprimerResponder(pageRetour);
			return CktlAlertPage.newAlertPageWithResponder(this, "Suppression d'un N-1",
					"<center>Confirmation de l'op&eacute;ration:<br><br>" +
							"Etes vous sur de vouloir supprimer cet agent de la hierarche - ses N-1 remontront d'un niveau (" +
							inputLaHierarchie.toIndividu().display() + ") ?",
					"Confirmer", "Annuler", null, CktlAlertPage.QUESTION, responder);
		}
	}

	/**
	 * La classe interne - l'implementation de AlertResponder pour la suppression
	 */
	class SupprimerResponder implements CktlAlertResponder {

		private WOComponent parentComponent;

		public SupprimerResponder(WOComponent aParentComponent) {
			parentComponent = aParentComponent;
		}

		/**
		 * Remonter a la page d'administration pour le composant CktlAlertPage. Il
		 * depend de la profondeur ou on se trouve dans la hierarchie
		 */
		private WOComponent getPageRetour() {
			WOComponent comp = parentComponent;
			while (!(comp instanceof PageAdministration))
				comp = comp.parent();
			return comp;
		}

		public WOComponent respondToButton(int buttonNo) {
			switch (buttonNo) {
			case 2:
				return getPageRetour();
			case 1:
				EOHierarchie eoHierarchieNp1 = inputLaHierarchie.toHierarchieNp1();
				// ne pas autoriser la suppression de la racine si elle possède plus
				// d'un fils
				boolean isSuppressionAutorisee = true;
				if (eoHierarchieNp1 == null &&
						inputLaHierarchie.tosHierarchieNm1().count() > 1) {
					isSuppressionAutorisee = false;
				}

				if (isSuppressionAutorisee) {

					// on prend tous les fils et on met en papa laNouvelleHierarchie
					NSArray<EOHierarchie> eoHierarchieNm1Array = inputLaHierarchie.tosHierarchieNm1();
					for (EOHierarchie eoHierarchieNm1 : eoHierarchieNm1Array) {
						if (eoHierarchieNp1 != null) {
							eoHierarchieNm1.setToIndividuRespRelationship(eoHierarchieNp1.toIndividu());
							eoHierarchieNm1.addToTosHierarchieNp1Relationship(eoHierarchieNp1);
						} else {
							// normalement, il n'y en a qu'1 seul
							eoHierarchieNm1.setToIndividuRespRelationship(null);
							eoHierarchieNm1.removeFromTosHierarchieNp1Relationship(inputLaHierarchie);
						}
					}
					ec.deleteObject(inputLaHierarchie);
					try {
						UtilDb.save(ec, "");
						// notifier la suppression au composant racine
						getArbreHierachieComponent().clearRacine();
						// rafraichir le pere et les nouveaux fils
						if (eoHierarchieNp1 != null) {
							// aller au pere
							session.setOnLoad("document.location='#" + eoHierarchieNp1.toIndividu().persId() + "';");
							// le rafraichier
							ec.invalidateObjectsWithGlobalIDs(new NSArray<EOGlobalID>(ec.globalIDForObject(eoHierarchieNp1)));
						}
					} catch (Throwable e) {
						e.printStackTrace();
					}

				} else {
					// suppression non autorisée
				}

				return getPageRetour();
			default:
				return null;
			}
		}
	}

	public WOComponent modifier() {
		isModeModifier = true;
		isModeAjouter = false;
		// aller au dernier individu choisi
		if (inputLaHierarchie != null && inputLaHierarchie.toIndividu() != null) {
			session.setOnLoad("document.location='#" + inputLaHierarchie.toIndividu().persId() + "';");
		}
		return neFaitRien();
	}

	public WOComponent enregistrerModif() throws Throwable {
		if (eoIndividuSelected != null) {
			EOIndividu leNouvelAutreIndividu = inputLaHierarchie.toIndividu();
			// remplacer avec un individu dans la hierarchie : il faut retrouver sa
			// hierarchie
			if (HIE_INDIVIDU_HIE.equals(hieIndividu)) {
				NSArray<EOGlobalID> lesGlobalId = new NSArray<EOGlobalID>();
				/*
				 * EOHierarchie autreHierarchie =
				 * FinderHierarchie.findHierarchieForIndividuInContext( ec,
				 * lIndividuSelectionne(), inputLaPeriode);
				 */
				EOHierarchie autreHierarchie = EOHierarchie.getHierarchieForIndividuAndPeriode(eoIndividuSelected, inputLaPeriode);
				autreHierarchie.setToIndividuRelationship(leNouvelAutreIndividu);
				lesGlobalId = lesGlobalId.arrayByAddingObject(ec.globalIDForObject(autreHierarchie));
				// changer les hierachies n-1 de l'autre
				NSArray lesHieNm1Autre = EOHierarchie.findHierarchieForIndividuRespInContext(
						ec, eoIndividuSelected, inputLaPeriode);
				for (int i = 0; i < lesHieNm1Autre.count(); i++) {
					EOHierarchie uneHieNm1 = (EOHierarchie) lesHieNm1Autre.objectAtIndex(i);
					uneHieNm1.setToIndividuRespRelationship(leNouvelAutreIndividu);
					lesGlobalId = lesGlobalId.arrayByAddingObject(ec.globalIDForObject(uneHieNm1));
				}
				// changer les hierachies n-1 de l'actuel
				inputLaHierarchie.setToIndividuRelationship(eoIndividuSelected);
				lesGlobalId = lesGlobalId.arrayByAddingObject(ec.globalIDForObject(inputLaHierarchie));
				NSArray lesHieNm1Input = EOHierarchie.findHierarchieForIndividuRespInContext(
						ec, leNouvelAutreIndividu, inputLaPeriode);
				for (int i = 0; i < lesHieNm1Input.count(); i++) {
					EOHierarchie uneHieNm1 = (EOHierarchie) lesHieNm1Input.objectAtIndex(i);
					uneHieNm1.setToIndividuRespRelationship(eoIndividuSelected);
					lesGlobalId = lesGlobalId.arrayByAddingObject(ec.globalIDForObject(uneHieNm1));
				}
				UtilDb.save(ec, "");
				// refetcher les objets changes
				ec.invalidateObjectsWithGlobalIDs(lesGlobalId);
			} else {
				inputLaHierarchie.setToIndividuRelationship(eoIndividuSelected);
				// changer les hierachies n-1 de l'actuel
				NSArray<EOGlobalID> lesGlobalId = new NSArray<EOGlobalID>(ec.globalIDForObject(inputLaHierarchie));
				NSArray lesHieNm1Input = EOHierarchie.findHierarchieForIndividuRespInContext(
						ec, leNouvelAutreIndividu, inputLaPeriode);
				for (int i = 0; i < lesHieNm1Input.count(); i++) {
					EOHierarchie uneHieNm1 = (EOHierarchie) lesHieNm1Input.objectAtIndex(i);
					uneHieNm1.setToIndividuRespRelationship(eoIndividuSelected);
					lesGlobalId = lesGlobalId.arrayByAddingObject(ec.globalIDForObject(uneHieNm1));
				}
				UtilDb.save(ec, "");
				// refetcher les objets changes
				ec.invalidateObjectsWithGlobalIDs(lesGlobalId);
			}
			isModeModifier = false;
			// aller a l'individu echange
			session.setOnLoad("document.location='#" + eoIndividuSelected.persId() + "';");
		}
		return neFaitRien();
	}

	// VISIBILITE DES DROITS ANNEXES DANS L'ARBRE

	/**
	 * Faut-il afficher des droits ?
	 */
	public boolean isShowDroit() {
		boolean isShowDroit = false;

		if (showDroitsAnnexes || showDroitsHerites) {
			isShowDroit = true;
		}

		return isShowDroit;
	}

	/**
	 * Un droit dans la liste des droits annexes
	 */
	public EODroit droitItem;

	private NSArray getDroitListOnEvaluationForTypeDroitAcces(EOTypeDroitAcces typeDroitAcces) {
		NSArray result = new NSArray();
		if (inputLaHierarchie != null && isShowDroit()) {
			EOVCandidatEvaluation vCandidatEvaluation = null;
			// d'abord trouver l'evaluation associ�e (il n'y en a pas forc�ment une,
			// si la personne
			// dans l'arbre est un prof par exemple)
			try {
				vCandidatEvaluation = EOVCandidatEvaluation.findRecordForIndividuAndPeriode(
						inputLaHierarchie.toIndividu(), inputLaHierarchie.toEvaluationPeriode());
			} catch (NoSuchElementException e) {
				// bon ben yen a pas, on va pas plus loin
			}
			if (vCandidatEvaluation != null) {
				// liste des services d'affectation pour cette evaluation
				NSArray servicesPourEvaluation = vCandidatEvaluation.tosStructure();
				for (int i = 0; i < servicesPourEvaluation.count(); i++) {
					EOStructure service = (EOStructure) servicesPourEvaluation.objectAtIndex(i);
					if (showDroitsAnnexes) {
						result = result.arrayByAddingObjectsFromArray(EODroit.fetchDroits(
								ec, typeDroitAcces, EOTypeDroitCible.eoTypeDroitCibleEvaluation(ec), service.toComposante(), service,
								inputLaHierarchie.toIndividu(), inputLaHierarchie.toEvaluationPeriode(), null, null, null, false));
					}
					if (showDroitsHerites) {
						result = result.arrayByAddingObjectsFromArray(EODroit.fetchDroits(
								ec, typeDroitAcces, EOTypeDroitCible.eoTypeDroitCibleEvaluation(ec), service.toComposante(), service,
								inputLaHierarchie.toIndividu(), inputLaHierarchie.toEvaluationPeriode(), null, null, null, true));
					}
				}
			}
		}
		return result;

	}

	/**
	 * La liste des individus qui ont le droit de visualisation sur la personne
	 * (ou l'evaluation). Les enregistrement sont des objets issus de l'entite
	 * <code>Droit</code>
	 */
	public NSArray getListVisu() {
		return getDroitListOnEvaluationForTypeDroitAcces(EOTypeDroitAcces.typeDroitAccesVisualisation(ec));
	}

	/**
	 * La liste des individus qui ont le droit de modification sur la personne (ou
	 * l'evaluation). Les enregistrement sont des objets issus de l'entite
	 * <code>Droit</code>
	 */
	public NSArray getListModif() {
		return getDroitListOnEvaluationForTypeDroitAcces(EOTypeDroitAcces.typeDroitAccesModification(ec));
	}

	// VISIBILITE DES EVALUATIONS

	/**
	 * Une evaluation dans la liste des evaluations
	 */
	public EOEvaluation evaluationItem;

	/**
	 * affichage d'une evaluation : debut-fin
	 */
	public String evaluationItemDisplay() {
		return DateCtrl.dateToString(evaluationItem.toEvaluationPeriode().epeDDebut()) +
				"-" + DateCtrl.dateToString(evaluationItem.toEvaluationPeriode().epeDFin());
	}

	public final ArbreHierarchique getArbreHierachieComponent() {
		return arbreHierachieComponent;
	}

	public final void setArbreHierachieComponent(
			ArbreHierarchique arbreHierachieComponent) {
		this.arbreHierachieComponent = arbreHierachieComponent;
	}
}
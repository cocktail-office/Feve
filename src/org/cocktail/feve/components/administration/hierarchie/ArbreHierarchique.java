package org.cocktail.feve.components.administration.hierarchie;

// Generated by the WOLips Templateengine Plug-in at 12 janv. 2007 15:12:41

import org.cocktail.feve.eos.modele.grhum.EOStructure;
import org.cocktail.feve.eos.modele.mangue.EOEvaluationPeriode;
import org.cocktail.feve.eos.modele.mangue.EOHierarchie;
import org.cocktail.fwkcktlwebapp.server.components.CktlAlertPage;
import org.cocktail.fwkcktlwebapp.server.components.CktlAlertResponder;
import org.cocktail.ycrifwk.utils.UtilDb;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.appserver.WOResponse;
import com.webobjects.foundation.NSArray;

/**
 * Page permettrant d'effectuer la gestion de l'arbre hierarchique de
 * l'application. De cette arboresence découle les droits sur les evaluations.
 * 
 * @author Cyril Tarade <cyril.tarade at univ-lr.fr>
 */

public class ArbreHierarchique
		extends A_GestionPeriode {

	/**
	 * La page parente
	 */
	public PageAdministrationHierarchie pageAdministrationHierarchie;

	/**
   * 
   */
	public EOHierarchie eoHierarchieRacine;

	/**
	 * Indique s'il faut afficher les droits directs ou pas
	 */
	public boolean showDroitsAnnexes;
	/**
	 * Indique s'il faut afficher les droits herites ou pas
	 */
	public boolean showDroitsHerites;
	/**
	 * Indique s'il faut afficher les droits herites ou pas
	 */
	public boolean showTotalEvaluation;

	/**
	 * Indique s'il faut afficher les evaluations de chaque agent
	 */
	public boolean showEvaluations;

	/**
	 * booleans bidons ne pas avoir la remontee de la valeur de showDroitsAnnexes
	 * et showEvaluations depuis les nodes.
	 */
	public boolean showDroitsAnnexesReadOnly;
	public boolean showEvaluationsReadOnly;

	// message d'information
	public String strMessage;
	public boolean isAfficherMessage;

	public ArbreHierarchique(WOContext context) {
		super(context);
	}

	@Override
	public void appendToResponse(WOResponse aResponse, WOContext aContext) {
		super.appendToResponse(aResponse, aContext);
		// la css des droits
		addLocalCss(aResponse, "css/Droits.css");
		// si un affichage s'est fait la page précédente, on le masquera l'appel
		// suivant
		if (isAfficherMessage) {
			isAfficherMessage = false;
		}
	}

	public EOHierarchie getEoHierarchieRacine() {
		if (eoHierarchieRacine == null) {
			eoHierarchieRacine = EOHierarchie.getEoHierarchieRacineForPeriodeInContext(ec, getPeriodeSelected());
		}
		return eoHierarchieRacine;
	}

	public WOComponent toutDevelopper() {
		getEoHierarchieRacine().voirTousNm1();
		return null;
	}

	public boolean showDroitsAnnexesReadOnly() {
		return showDroitsAnnexes;
	}

	public boolean showDroitsHeritesReadOnly() {
		return showDroitsHerites;
	}

	public boolean showTotalEvaluationReadOnly() {
		return showTotalEvaluation;
	}

	public boolean showEvaluationsReadOnly() {
		return showEvaluations;
	}

	public void setPeriodeSelected(EOEvaluationPeriode value) {
		super.setPeriodeSelected(value);
		clearRacine();
	}

	/**
	 * Demande au composant de refetcher sa racine
	 */
	public void clearRacine() {
		eoHierarchieRacine = null;
	}

	/**
	 * Création de la hiérarchie
	 * 
	 * @return
	 * @throws Throwable
	 */
	public WOComponent doCreerHierarchie() throws Throwable {
		if (getPeriodeSelected() != null) {
			if (getPeriodeSelected().tosHierarchie().count() == 0) {
				EOStructure eoStructureRacine = EOStructure.findRacineInContext(ec);
				EOHierarchie.creerHierarchie(getPeriodeSelected(), eoStructureRacine);
				UtilDb.save(ec, "doCreerHierarchie()");
				// forcer immédiatement le rafraichissement
				for (EOHierarchie eoHierarchie : (NSArray<EOHierarchie>) getPeriodeSelected().tosHierarchie()) {
					ec.invalidateObjectsWithGlobalIDs(new NSArray(ec.globalIDForObject(eoHierarchie)));
					ec.invalidateObjectsWithGlobalIDs(new NSArray(ec.globalIDForObject(eoHierarchie)));
				}

				strMessage = "Arbre hiérarchique créé : " + getPeriodeSelected().tosHierarchie().count() + " enregistrements ont été créés";
			} else {
				strMessage = "Un arbre hiérarchique existe déjà sur cette période (" +
						getPeriodeSelected().tosHierarchie().count() + " enregistrements)";
			}
		} else {
			strMessage = "Aucune période n'a été selectionnée ...";
		}
		isAfficherMessage = true;
		return null;
	}

	/**
	 * Supprimer une periode (autorise que s'il n'y a aucun evaluation attachee)
	 */
	public WOComponent doSupprimerHierarchie() {
		String strMessageConfirmation = "Etes vous sûr de vous supprimer l'arbre hiérarchique <b>" + getPeriodeSelected().strDateDebutDateFin() + "</b> ?";
		strMessageConfirmation += "<br>";
		strMessageConfirmation += "L'arbre contient actuellement " + getPeriodeSelected().tosHierarchie().count() + " enregistrements.";
		SupprimerHierarchieResponder responder = new SupprimerHierarchieResponder(this.getTopParent());
		return CktlAlertPage.newAlertPageWithResponder(this.parent(), "Suppression d'arbre hiérarchique",
				"<center>" + strMessageConfirmation + "</center>",
				"SUPPRIMER", "Annuler", null, CktlAlertPage.QUESTION, responder);
	}

	/**
	 * Effacer l'arbre hiérarchique associé à une période
	 * 
	 * @return
	 * @throws Throwable
	 */
	private void supprimerHierarchie() throws Throwable {
		if (getPeriodeSelected() != null) {
			for (EOHierarchie eoHierarchie : (NSArray<EOHierarchie>) getPeriodeSelected().tosHierarchie()) {
				ec.deleteObject(eoHierarchie);
			}
			UtilDb.save(ec, "doSupprimerHierarchie()");

			// forcer immédiatement le rafraichissement
			for (EOHierarchie eoHierarchie : (NSArray<EOHierarchie>) getPeriodeSelected().tosHierarchie()) {
				ec.invalidateObjectsWithGlobalIDs(new NSArray(ec.globalIDForObject(eoHierarchie)));
				ec.invalidateObjectsWithGlobalIDs(new NSArray(ec.globalIDForObject(eoHierarchie)));
			}

			strMessage = "Arbre hiérarchique supprimé !";
			isAfficherMessage = true;
			// raz de la racine
			clearRacine();
		}
	}

	/**
	 * La classe interne - l'implementation de AlertResponder pour la suppression
	 * d'une periode
	 */
	private class SupprimerHierarchieResponder implements CktlAlertResponder {

		private WOComponent caller;

		public SupprimerHierarchieResponder(WOComponent aCaller) {
			super();
			caller = aCaller;
		}

		public WOComponent respondToButton(int buttonNo) {
			switch (buttonNo) {
			case 1:
				try {
					supprimerHierarchie();
				} catch (Throwable e) {
					e.printStackTrace();
					return CktlAlertPage.newAlertPageWithCaller(caller, "Erreur de Suppression",
								"La suppression de l'arbre a echoue ... (" + e.getMessage() + ")",
								"Revenir", CktlAlertPage.ERROR);
				}
			case 2:
				;
			default:
				;
			}
			return caller;
		}
	}

	/**
	 * 
	 * @return
	 */
	public boolean isAfficherLienCreerHierarchie() {
		boolean isAfficherLienCreerHierarchie = false;

		if (getEoHierarchieRacine() == null) {
			isAfficherLienCreerHierarchie = true;
		}

		return isAfficherLienCreerHierarchie;
	}

	/**
	 * 
	 * @return
	 */
	public boolean isAfficherLienSupprimerHierarchie() {
		boolean isAfficherLienSupprimerHierarchie = false;

		if (getEoHierarchieRacine() != null) {
			isAfficherLienSupprimerHierarchie = true;
		}

		return isAfficherLienSupprimerHierarchie;
	}

	/**
	 * 
	 * @return
	 */
	public boolean isAfficherLienToutDevelopper() {
		boolean isAfficherLienToutDevelopper = false;

		if (getEoHierarchieRacine() != null) {
			isAfficherLienToutDevelopper = true;
		}

		return isAfficherLienToutDevelopper;
	}

	public ArbreHierarchique getArbreHierarchieComponent() {
		return this;
	}
}
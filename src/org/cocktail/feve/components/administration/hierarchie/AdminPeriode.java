package org.cocktail.feve.components.administration.hierarchie;
// Generated by the WOLips Templateengine Plug-in at 5 d�c. 2007 16:23:30

import org.cocktail.feve.eos.modele.mangue.EODroit;
import org.cocktail.feve.eos.modele.mangue.EOEvaluationPeriode;
import org.cocktail.feve.eos.modele.mangue.EOHierarchie;
import org.cocktail.fwkcktlwebapp.common.database.CktlRecord;
import org.cocktail.fwkcktlwebapp.common.util.DateCtrl;
import org.cocktail.fwkcktlwebapp.common.util.StringCtrl;
import org.cocktail.fwkcktlwebapp.server.components.CktlAlertPage;
import org.cocktail.fwkcktlwebapp.server.components.CktlAlertResponder;
import org.cocktail.ycrifwk.utils.UtilDb;

import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WOContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSTimestamp;

/**
 * La page d'administration des periodes d'evaluation
 * 
 * @author Cyril Tarade <cyril.tarade at univ-lr.fr>
 */
public class AdminPeriode 
	extends A_GestionPeriode {

  /**
   * La page parente
   */
  public PageAdministrationHierarchie pageAdministrationHierarchie;
  
	// mode d'utilisation
	public int mode;
	private final static int MODE_NONE 	= 0;
	private final static int MODE_ADD		= 1;
	private final static int MODE_EDIT	= 2;
	
	// nouvelle periode
	public NSTimestamp newPeriodeDDebut;
	public NSTimestamp newPeriodeDFin;
	
	// modif. periode
	public EOEvaluationPeriode periodeChanged;
	
	// affichage de la derniere operation
	public String lastInfoMessage;
	
	public AdminPeriode(WOContext context) {
		super(context);
		initComponent();
	}
	
	/**
	 * Initialiser la liste des periodes et pr�-selection
	 */
	private void initComponent() {

		// composant en consultation
		mode = MODE_NONE;
		// raz message
		lastInfoMessage = StringCtrl.emptyString();
	}
	
	// navigation
	
	/**
	 * Creation d'une nouvelle periode
	 */
	public WOComponent addPeriode() {
		// par defaut, on commence a la fin de la derniere periode pour une duree de 1 ans
		if (getPeriodeArray().count() > 0) {
			EOEvaluationPeriode lastPeriode = (EOEvaluationPeriode) getPeriodeArray().lastObject();
			newPeriodeDDebut = lastPeriode.epeDFin().timestampByAddingGregorianUnits(0, 0, 1, 0, 0, 0);
			newPeriodeDFin = newPeriodeDDebut.timestampByAddingGregorianUnits(1, 0, -1, 0, 0, 0);
		} else {
			// date du jour + 1 ans
			newPeriodeDDebut = DateCtrl.now();
			newPeriodeDFin = newPeriodeDDebut.timestampByAddingGregorianUnits(1, 0, -1, 0, 0, 0);
		}
		mode = MODE_ADD;
		// raz message
		lastInfoMessage = StringCtrl.emptyString();	
		return null;
	}
	
	/**
	 * Modification d'une periode existante
	 */
	public WOComponent editPeriode() {
		mode = MODE_EDIT;
		periodeChanged = getPeriodeSelected();
		// raz message
		lastInfoMessage = StringCtrl.emptyString();	
		return null;
	}
	
	/**
	 * sauvegarder l'operation realisee
	 * @throws Throwable 
	 */
	public WOComponent doSave() throws Throwable {
		if (isAdding() && newPeriodeDDebut != null && newPeriodeDFin != null) {
			// creation de l'enregistrement dans la base
			periodeChanged = EOEvaluationPeriode.createEvaluationPeriode(ec, newPeriodeDDebut, newPeriodeDFin);
			// informer sur l'ajout
			lastInfoMessage = "Période " + DateCtrl.dateToString(newPeriodeDDebut) + "-" + 
				DateCtrl.dateToString(newPeriodeDFin) + " ajoutée ...";
		} else {
			// informer sur la modif
			lastInfoMessage = "Période modifiée ...";
		}
		boolean saveIsOk = UtilDb.save(ec, "");
		if (saveIsOk) {
			// dans le cas d'une nouvelle periode, on va aussi dupliquer la hierarchie
			if (isAdding()) {
				EOEvaluationPeriode periodePrev = periodeChanged.toPrevPeriode();
				// copie de l'arbre et des droits existants
				if (periodePrev != null) {
					EOHierarchie.duplicateArbre(ec, periodePrev, periodeChanged);
					EODroit.duplicateDroitPeriode(ec, periodePrev, periodeChanged);
				}
				saveIsOk = UtilDb.save(ec, "");
			}
		}
		if (saveIsOk) {
			// recharger la liste en ajout
			if (isAdding()) {
				resetPeriodeArray();
			}
			// reselectionner l'enregistrement nouvellement modifie
			setPeriodeSelected(periodeChanged);
			// repassage en mode lecture
			mode = MODE_NONE;
			// on recharge les evaluations et la liste des periodes
			feveUserInfo().reloadEvaluationList();
		} else {
			lastInfoMessage = "Erreur d'enregistrement !";
		}
		return null;
	}
	
	/**
	 * Annuler l'action en cours
	 */
	public WOComponent doCancel() {
		mode = MODE_NONE;
		ec.revert();
		// raz message
		lastInfoMessage = StringCtrl.emptyString();	
		return null;
	}
	
  /**
   * Supprimer une periode (autorise que s'il n'y a aucun evaluation attachee)
   */
  public WOComponent doDelete() {
  	// liste des evaluations sur cette periode
  	NSArray recsEvaluation = getPeriodeSelected().tosEvaluation();
  	final StringBuffer sb = new StringBuffer();
  	if (recsEvaluation.count() > 0) {
  		sb.append("<div align=\"left\"><b>ATTENTION</b>, la p&eacute;riode que vous voulez supprimer contient des entretiens professionnels (");
  		sb.append(recsEvaluation.count()).append(")<br/>");
  		sb.append("Voici la liste des entretiens professionnels qui seront <b>supprim&eacute;s</b> si vous continuez :<ul>");
  		for (int i = 0; i < recsEvaluation.count(); i++) {
  			CktlRecord rec = (CktlRecord) recsEvaluation.objectAtIndex(i);
  			sb.append("<li>");
  			sb.append(rec.stringForKeyPath("toIndividu.nomUsuel")).append(" ").append(rec.stringForKeyPath("toIndividu.prenom"));
  			sb.append("</li>");
  		}
  		sb.append("</ul></div>");
  	} else {
  		sb.append("&Egrave;tes vous sur de vouloir supprimer cette p&eacute;riode ?");
  	}
  	
  	DeletePeriodeResponder responder = new DeletePeriodeResponder(this.getTopParent());
  	return CktlAlertPage.newAlertPageWithResponder(this.parent(), "Suppression de Periode",
  			"<center>" + sb.toString() + "</center>",
  			"SUPPRIMER", "Annuler", null, CktlAlertPage.QUESTION, responder);
  }


	/**
	 * La classe interne - l'implementation de AlertResponder pour
	 * la suppression d'une periode
	 */	 
	private class DeletePeriodeResponder implements CktlAlertResponder {

		private WOComponent caller;
		
		public DeletePeriodeResponder(WOComponent aCaller) {
			super();
			caller = aCaller;
		}
		
		public WOComponent respondToButton(int buttonNo) {
			switch (buttonNo) {
				case 1: 
					ec.deleteObject(getPeriodeSelected());
					try {
		  			UtilDb.save(ec, "");
		  			// remettre le composant en l'etat initial
		  			initComponent();  			
		  			// informer sur la suppression
		  			lastInfoMessage = "Periode supprimee ...";
		  			// on recharge les evaluations et la liste des periodes
		  			resetPeriodeArray();
		  			feveUserInfo().reloadEvaluationList();
					} 
					catch (Throwable e) {
						e.printStackTrace();
						return CktlAlertPage.newAlertPageWithCaller(caller, "Erreur de Suppression", 
								"La suppression de la periode a echoue ... (" + e.getMessage()+")", 
								"Revenir", CktlAlertPage.ERROR);
					}
				case 2: ;
				default: ;
			}
			return caller;
		}
	} 
  
	// boolean interface

	public boolean isAdding() {
		return mode == MODE_ADD;
	}

	public boolean isEditing() {
		return mode == MODE_EDIT;
	}
	
	/**
	 * On peut ajouter qu'en mode "rien"
	 */
	public boolean showBtnAdd() {
		return mode == MODE_NONE;
	}

	/**
	 * On n'edite que s'il y a des periodes et que
	 * l'un d'elles est selectionnee, et qu'on est 
	 * en mode "rien"
	 */
	public boolean showBtnEdit() {
		return mode == MODE_NONE && getPeriodeArray().count() > 0 && getPeriodeSelected() != null;
	}
	
	/**
	 * Faut-il afficher le message d'information
	 */
	public boolean showLastInfoMessage() {
		return !StringCtrl.isEmpty(lastInfoMessage);
	}

}